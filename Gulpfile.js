// Generated by CoffeeScript 1.10.0
(function() {
  var babelify, browserify, buffer, buildScript, cssmin, gulp, gutil, handleErrors, livereload, notify, sass, source, sourcemaps, uglify, watchify;

  gulp = require('gulp');

  gutil = require('gulp-util');

  notify = require('gulp-notify');

  source = require('vinyl-source-stream');

  buffer = require('vinyl-buffer');

  sass = require('gulp-sass');

  cssmin = require('gulp-cssmin');

  sourcemaps = require('gulp-sourcemaps');

  uglify = require('gulp-uglify');

  browserify = require('browserify');

  babelify = require('babelify');

  watchify = require('watchify');

  livereload = require('gulp-server-livereload');

  handleErrors = function() {
    var args;
    args = Array.prototype.slice.call(arguments);
    notify.onError({
      title: 'Compile Error',
      message: '<%= error.message %>'
    }).apply(this, args);
    return this.emit('end');
  };

  buildScript = function(watch) {
    var bundler, props, rebundle;
    props = {
      entries: ['src/js/main.js'],
      debug: false,
      transform: [
        babelify.configure({
          presets: ['es2015', 'react']
        })
      ]
    };
    bundler = browserify(props);
    if (watch) {
      bundler = watchify(bundler);
    }
    rebundle = function() {
      var stream;
      stream = bundler.bundle();
      return stream.on('error', handleErrors).pipe(source('main.js')).pipe(buffer()).pipe(sourcemaps.init({
        loadMaps: true
      })).pipe(uglify().on('error', gutil.log)).pipe(gulp.dest('dist/js')).pipe(notify({
        title: 'JS rebuilt'
      }));
    };
    bundler.on('update', function() {
      rebundle();
      return gutil.log('Rebundle...');
    });
    return rebundle();
  };

  gulp.task('sass', function() {
    return gulp.src('src/css/main.sass').pipe(sass().on('error', sass.logError)).pipe(cssmin()).pipe(gulp.dest('dist/css'));
  });

  gulp.task('js', function() {
    return buildScript(false);
  });

  gulp.task('images', function() {
    return gulp.src('src/img/*.{jpg,png}').pipe(gulp.dest('dist/img'));
  });

  gulp.task('server', function() {
    return gulp.src('dist').pipe(livereload({
      livereload: true,
      directoryListing: false,
      open: true,
      fallback: 'index.html'
    }));
  });

  gulp.task('default', ['js', 'sass', 'server'], function() {
    buildScript(true);
    gulp.watch(['src/css/**/*.sass'], ['sass']);
    return gulp.watch(['src/img/*'], ['images']);
  });

}).call(this);
